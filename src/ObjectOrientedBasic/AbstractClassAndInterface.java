package ObjectOrientedBasic;

/**
 * 抽象类：
 *  1、通过abstract定义的方法是抽象方法，它只有定义，没有实现。
 *    抽象方法定义了子类必须实现的接口规范
 *  2、定义了抽象方法的class必须被定义为抽象类，从抽象类继承的子类必须实现抽象方法
 *  3、如果不实现抽象方法，该子类仍是一个抽象类
 *  4、面向抽象编程使得调用者只关心抽象方法的定义，不关心子类的具体实现
 *
 * 接口定义了纯抽象规范，一个类可以实现多个接口：
 *  1、接口也是数据类型，适用于向上转型和向下转型
 *  2、接口的所有方法都是抽象方法，接口不能定义实例字段
 *  3、接口可以定义default方法(JDK>=1.8)
 *
 *
 *
 * 抽象类和接口的对比如下：
 *
 * abstract             class	                interface
 * 继承	                只能extends一个class	    可以implements多个interface
 * 字段	                可以定义实例字段	        不能定义实例字段
 * 抽象方法	            可以定义抽象方法	        可以定义抽象方法
 * 非抽象方法	            可以定义非抽象方法	        可以定义default方法
 */
public class AbstractClassAndInterface {

    /*
    面向抽象编程的本质：
        1.上层代码只定义规范
        2.不需要子类就可以实现业务逻辑
        3.具体的业务逻辑由不同的子类实现，调用者并不关心
     */
}
